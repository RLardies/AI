;; Ejercicio 1
;; Apartado 1
(< (abs (- (newton #'sin #'cos 50 2.0) pi)) 1.0L-6)
(< (abs (- (newton #'(lambda (x) (* x x)) #'(lambda(x) (* 2 x)) 50 1.0) 0)) 1.0L-4)

;; Apartado 2
(equal (newton-all #'sin #'cos 50 (mapcar #'eval '((/ pi 2) 1.0 2.0 4.0 6.0)))
  '(NIL 0.0 3.1415927 3.1415927 6.2831855))
(equal (newton-all #'sin #'cos 50 '() '1) nil)
(equal (newton-all #'sin #'cos 50 (mapcar #'eval '((/ pi 2) 1.0 2.0 4.0 6.0)) 1.0)
  '(NIL 0.0 3.1415927 3.1415927 6.2831855))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Ejercicio 2
;; Apartado 1
(equal (combine-elt-lst 1 '(1 2 3 4)) '((1 1) (1 2) (1 3) (1 4))) ;; Test simple
(equal (combine-elt-lst 1 NIL) NIL) ;; Test con lista vacía
(equal (combine-elt-lst '(1 2) '(5 6 7))
	'(((1 2) 5) ((1 2) 6) ((1 2) 7))) ;; Test con lista como elemento
(equal (combine-elt-lst NIL '(2 3 4)) '((NIL 2) (NIL 3) (NIL 4))) ;; Test con NIL como elemento

;; Apartado 2
(equal (combine-lst-lst '(1 2) '(a b c))
	'((1 a) (1 b) (1 c) (2 a) (2 b) (2 c)));; Test simple
(null (combine-lst-lst '(1 2) NIL)) ;; Test segunda lista vacía
(null (combine-lst-lst NIL '(a b c))) ;; Test primera lista vacía
(equal (combine-lst-lst NIL NIL) NIL) ;; Test ambas listas vacías

;; Apartado 3
(equal (combine-list-of-lsts '((1 2) (3 4) (5 6)))
	'((1 3 5) (1 3 6) (1 4 5) (1 4 6) (2 3 5) (2 3 6) (2 4 5) (2 4 6)))

(equal (combine-list-of-lsts '((1 2) (a b) ("hola" "cosa")))
	'((1 a "hola") (1 a "cosa") (1 b "hola") (1 b "cosa")
	(2 a "hola") (2 a "cosa") (2 b "hola") (2 b "cosa"))) ;; Test simple
(null (combine-list-of-lsts '(NIL '(1 2) '(a b)))) ;; Test con primer argumento NIL
(null (combine-list-of-lsts '(NIL '(1 2) NIL))) ;; Test varios argumentos NIL
(null (combine-list-of-lsts '(NIL NIL NIL NIL))) ;; Test con todos argumentos NIL

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Ejercicio 3
;; Apartado 1
(= (scalar-product '(1 2 3 4) '(1 1 2 1)) 13) ;; Test simple
(= (scalar-product '(1 2 3) '(0 0 0)) 0);; Test con vector 0

;; Apartado 2
(= (euclidean-norm '(-1 2 -5)) (sqrt 30)) ;; Test Simple
(= (euclidean-norm '(0 0 0)) (sqrt 0)) ;; Test con vector 0

;; Apartado 3
(= (euclidean-distance '(1 2 3) '(2 4 -8)) (sqrt 126)) ;; Test Simple
(= (euclidean-distance '(1 1 1) '(1 1 1)) 0) ;; Test con vectores iguales
(= (euclidean-distance '(1 1 1) '(0 0 0)) (sqrt 3)) ;; Test con vector 0

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Ejercicio 4
;; Apartado 1
(< (abs (- (cosine-similarity '(1 2 3) '(1 2 3)) 1)) 1.0L-6) ;; Test vectores iguales
(< (abs (- (cosine-similarity '(1 2 3) '(-4.5 7 0)) 0.3051052626)) 1.0L-6) ;; Test simple
(null (cosine-similarity '(0 0 0) '(1 2 3))) ;; Test con vector 0

;; Apartado 2
(< (abs (- (angular-distance '(1 2 3) '(1 2 3)) 0)) 1.0L-3) ;; Test vectores iguales
(< (abs (- (angular-distance '(1 2 3) '(-4.5 7 0)) 0.4013083507)) 1.0L-3) ;; Test simple
(null (angular-distance '(0 0 0) '(1 2 3))) ;; Test con vector 0

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Ejercicio 5
(equal (select-vectors '((-1 -1 -1) (-1 -1 1) (-1 1 1) (1 1 1))
 '(1 1 1) #'cosine-similarity 0.2) (list (list '(1 1 1) '1.0) (list '(-1 1 1) '0.33333334)))
(null (select-vectors '((-1 -1 -1) (-1 -1 1) (-1 1 1) (1 1 1))
  '(0 0 0) #'cosine-similarity 0.2))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Ejercicio 6
(equal (nearest-neighbor '((1 2 3) (-1 2 5) (-2 -3 1)) '(1 1 1) #'angular-distance) '((1 2 3) 0.12337583)) ;; Test simple
(null (nearest-neighbor NIL '(1 2 3) #'angular-distance)) ;; Lista de vectores vacía
(null (nearest-neighbor '((1 2 3) (4 5 6)) NIL #'angular-distance)) ;; Vector test NIL
